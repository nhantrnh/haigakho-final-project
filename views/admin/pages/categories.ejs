<div class="p-6">
  <div class="mb-8">
    <h2 class="text-2xl font-bold text-gray-800">Categories Management</h2>
    <p class="text-gray-600 mt-1">Manage your product categories</p>
  </div>

  <div class="bg-white rounded-xl shadow-sm border border-gray-100">
    <div class="p-6 flex justify-between items-center border-b">
      <div class="flex items-center space-x-4">
        <div class="bg-[#3b5d50] bg-opacity-10 p-3 rounded-lg">
          <i class="fas fa-tags text-[#3b5d50]"></i>
        </div>
        <div>
          <h3 class="font-semibold text-gray-800">All Categories</h3>
          <p class="text-sm text-gray-600">
            <%= categories.length %> categories total
          </p>
        </div>
      </div>

      <button
        onclick="showCategoryForm()"
        class="px-4 py-2 bg-[#3b5d50] hover:bg-[#2f4a40] text-gray rounded-lg transition-colors flex items-center space-x-2"
        data-bs-toggle="modal"
        data-bs-target="#addCategoryModal"
      >
        <i class="fas fa-plus"></i>
        <span>Add Category</span>
      </button>
    </div>

    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Name
            </th>
            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Description
            </th>
            <th
              class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Actions
            </th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <% categories.forEach(category => { %>
          <tr class="hover:bg-gray-50 transition-colors">
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900">
                <%= category.name %>
              </div>
            </td>
            <td class="px-6 py-4">
              <div class="text-sm text-gray-500">
                <%= category.description %>
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-center">
              <button
                onclick="editCategory('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')"
                class="inline-flex items-center px-3 py-1.5 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#3b5d50] transition-colors mr-2"
              >
                <i class="fas fa-edit mr-1.5"></i> Edit
              </button>
              <button
                onclick="deleteCategory('<%= category._id %>')"
                class="inline-flex items-center px-3 py-1.5 border border-red-300 rounded-md text-sm font-medium text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
              >
                <i class="fas fa-trash mr-1.5"></i> Delete
              </button>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- Replace both modals with this single form overlay -->
<div
  id="categoryFormOverlay"
  class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center"
>
  <div class="bg-white p-8 rounded-lg shadow-lg max-w-2xl w-full mx-4">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-xl font-bold" id="formTitle">Add Category</h3>
      <button
        onclick="closeCategoryForm()"
        class="text-gray-500 hover:text-gray-700"
      >
        <i class="fas fa-times"></i>
      </button>
    </div>

    <form id="categoryForm" class="space-y-6">
      <input type="hidden" id="categoryId" />

      <div>
        <label class="block text-sm font-medium text-gray-700"
          >Category Name</label
        >
        <input
          type="text"
          id="categoryName"
          required
          class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-[#3b5d50] focus:border-transparent"
        />
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700"
          >Description</label
        >
        <textarea
          id="categoryDescription"
          rows="4"
          class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-[#3b5d50] focus:border-transparent"
        ></textarea>
      </div>

      <div class="flex justify-end space-x-3">
        <button
          type="button"
          onclick="closeCategoryForm()"
          class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
        >
          Cancel
        </button>
        <button
          type="submit"
          id="submitBtn"
          class="px-4 py-2 text-sm font-medium text-green-600 bg-[#3b5d50] rounded-lg hover:bg-[#2f4a40]"
        >
          Save Category
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  function showCategoryForm(id = null, name = "", description = "") {
    const overlay = document.getElementById("categoryFormOverlay");
    const form = document.getElementById("categoryForm");
    const title = document.getElementById("formTitle");
    const submitBtn = document.getElementById("submitBtn");

    // Set form data
    document.getElementById("categoryId").value = id;
    document.getElementById("categoryName").value = name;
    document.getElementById("categoryDescription").value = description;

    // Update title and button text
    title.textContent = id ? "Edit Category" : "Add Category";
    submitBtn.textContent = id ? "Update Category" : "Create Category";

    // Show overlay
    overlay.classList.remove("hidden");
    overlay.classList.add("flex");
  }

  function closeCategoryForm() {
    const overlay = document.getElementById("categoryFormOverlay");
    overlay.classList.add("hidden");
    overlay.classList.remove("flex");
  }

  // Update edit function
  function editCategory(id, name, description) {
    showCategoryForm(id, name, description);
  }

  // Form submission handler
  document
    .getElementById("categoryForm")
    .addEventListener("submit", async function (e) {
      e.preventDefault();
      const id = document.getElementById("categoryId").value;
      const name = document.getElementById("categoryName").value;
      const description = document.getElementById("categoryDescription").value;
      const submitBtn = document.getElementById("submitBtn");

      try {
        submitBtn.disabled = true;
        submitBtn.innerHTML = `<i class="fas fa-spinner fa-spin mr-2"></i>${
          id ? "Updating..." : "Creating..."
        }`;

        const url = id ? `/admin/categories/${id}` : "/admin/categories";
        const method = id ? "PUT" : "POST";

        const response = await fetch(url, {
          method,
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ name, description }),
        });

        const data = await response.json();
        if (data.success) {
          showToast("success", data.message);
          closeCategoryForm();
          location.reload();
        } else {
          showToast("error", data.message);
        }
      } catch (error) {
        showToast("error", `Failed to ${id ? "update" : "create"} category`);
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = id ? "Update Category" : "Create Category";
      }
    });

  // Close when clicking outside
  document
    .getElementById("categoryFormOverlay")
    .addEventListener("click", (e) => {
      if (e.target.id === "categoryFormOverlay") {
        closeCategoryForm();
      }
    });

  async function deleteCategory(id) {
    if (!confirm("Are you sure you want to delete this category?")) return;

    try {
      const response = await fetch(`/admin/categories/${id}`, {
        method: "DELETE",
      });

      const data = await response.json();
      if (data.success) {
        showToast("success", data.message);
        location.reload();
      } else {
        showToast("error", data.message);
      }
    } catch (error) {
      showToast("error", "Failed to delete category");
    }
  }

  function showToast(type, message) {
    // Add your toast notification implementation
    // Example using Toastify or other library
    Toastify({
      text: message,
      duration: 3000,
      gravity: "top",
      position: "right",
      backgroundColor: type === "success" ? "#3b5d50" : "#ef4444",
    }).showToast();
  }
</script>
