<div class="p-6">
  <div class="container-fluid px-6 py-4">
    <div class="bg-white rounded-lg shadow-sm p-6">
      <!-- Header with Filters -->
      <div class="flex flex-wrap justify-between items-center mb-6">
        <h2 class="text-xl font-semibold text-gray-800">User List</h2>

        <div class="flex space-x-4">
          <!-- Search -->
          <div class="flex w-72">
            <input
              type="text"
              id="searchInput"
              class="form-control px-4 py-2 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-[#3b5d50]"
              placeholder="Search users..."
            />
            <button
              id="searchBtn"
              class="px-4 bg-[#3b5d50] text-white rounded-r-lg hover:bg-[#2f4a40]"
            >
              <i class="fas fa-search"></i>
            </button>
          </div>

          <!-- Sort -->
          <select id="sortField" class="px-4 py-2 border rounded-lg">
            <option value="username">Name</option>
            <option value="email">Email</option>
            <option value="createdAt">Registration Date</option>
          </select>

          <select id="sortOrder" class="px-4 py-2 border rounded-lg">
            <option value="asc">Ascending</option>
            <option value="desc">Descending</option>
          </select>
        </div>
      </div>

      <!-- Users Table -->
      <div class="overflow-x-auto">
        <table class="min-w-full leading-normal">
          <thead>
            <tr>
              <!-- ...existing headers... -->
            </tr>
          </thead>
          <tbody id="usersTableBody">
            <!-- Data will be inserted here by JS -->
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div
        class="px-5 py-5 bg-white border-t flex justify-between items-center"
      >
        <div class="text-sm text-gray-700">
          Showing <span id="startCount">0</span> to
          <span id="endCount">0</span> of <span id="totalCount">0</span> entries
        </div>
        <div id="pagination" class="inline-flex"></div>
      </div>
    </div>
  </div>
</div>

<div
  id="userDetailModal"
  class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center"
>
  <div class="bg-white p-8 rounded-lg shadow-lg max-w-2xl w-full mx-4">
    <div class="flex justify-between items-center mb-6">
      <h3 class="text-xl font-bold">User Details</h3>
      <button
        onclick="closeUserDetail()"
        class="text-gray-500 hover:text-gray-700"
      >
        <i class="fas fa-times"></i>
      </button>
    </div>

    <div id="userDetailContent" class="space-y-4">
      <!-- User details will be inserted here -->
    </div>
  </div>
</div>

<script>
  let currentPage = 1;
  const limit = 5;

  function renderUserRow(user) {
    return `
      <tr>
        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
          <div class="flex items-center">
            <div class="flex-shrink-0 w-10 h-10">
              <img class="w-full h-full rounded-full"
                   src="https://ui-avatars.com/api/?name=${
                     user.username
                   }&background=3b5d50&color=ffffff"
                   alt="${user.username}" />
            </div>
            <div class="ml-3">
              <p class="text-gray-900 whitespace-no-wrap">${user.username}</p>
            </div>
          </div>
        </td>
        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
          <p class="text-gray-900 whitespace-no-wrap">${user.email}</p>
        </td>
        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
          <span class="relative inline-block px-3 py-1 font-semibold ${
            user.role === "admin"
              ? "text-green-900 bg-green-200"
              : "text-gray-900 bg-gray-200"
          } rounded-full">
            ${user.role}
          </span>
        </td>
        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
          <span class="relative inline-block px-3 py-1 font-semibold ${
            user.status === "active"
              ? "text-green-900 bg-green-200"
              : user.status === "banned"
              ? "text-red-900 bg-red-200"
              : "text-gray-900 bg-gray-200"
          } rounded-full">
            ${user.status}
          </span>
        </td>
        <td class="px-5 py-5 border-b border-gray-200 bg-white text-sm">
            <button class="text-blue-600 hover:text-blue-900 mr-3" onclick="viewUserDetail('${
              user._id
            }')">
            <i class="fas fa-eye"></i>
            </button>

            ${
              user._id !== currentAdminId
                ? `
          <button
            class="${
              user.status === "banned"
                ? "text-green-600 hover:text-green-900"
                : "text-red-600 hover:text-red-900"
            } mr-3"
            onclick="toggleBanStatus('${user._id}', ${
                    user.status === "banned" ? true : false
                  })"
          >
            <i class="fas ${
              user.isBanned ? "fa-user-check" : "fa-user-slash"
            }"></i>
          </button>
        `
                : ""
            }
          
        </td>
      </tr>
    `;
  }

  async function toggleBanStatus(userId, currentlyBanned) {
    try {
      console.log(userId, currentlyBanned);
      let reason = "";
      if (!currentlyBanned) {
        reason = prompt("Please enter a reason for banning this user:");
        if (!reason) return; // Cancel if no reason provided
      }

      const response = await fetch("/admin/users/toggle-ban", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ userId, reason }),
      });

      const data = await response.json();
      if (data.success) {
        showToast(data.message, "success");
        loadUsers(currentPage); // Reload current page
      } else {
        showToast(data.message, "error");
      }
    } catch (error) {
      showToast("Error updating user status", "error");
      console.error("Error:", error);
    }
  }

  function showToast(message, type) {
    // Add your toast notification implementation here
  }

  // Add currentAdminId to the page
  const currentAdminId = "<%= currentUser._id %>"; // Add this to your template

  async function viewUserDetail(userId) {
    try {
      const response = await fetch(`/admin/api/users/${userId}`);
      const user = await response.json();

      const content = `
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700">Username</label>
          <p class="mt-1 text-sm text-gray-900">${user.username}</p>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Email</label>
          <p class="mt-1 text-sm text-gray-900">${user.email}</p>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Name</label>
          <p class="mt-1 text-sm text-gray-900">${user.name}</p>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Address</label>
          <p class="mt-1 text-sm text-gray-900">${user.address}</p>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Role</label>
          <p class="mt-1 text-sm text-gray-900">${user.role}</p>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Status</label>
          <p class="mt-1 text-sm text-gray-900">${user.status}</p>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Created At</label>
          <p class="mt-1 text-sm text-gray-900">${new Date(
            user.createdAt
          ).toLocaleString()}</p>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700">Last Updated</label>
          <p class="mt-1 text-sm text-gray-900">${new Date(
            user.updatedAt
          ).toLocaleString()}</p>
        </div>
      </div>
    `;

      document.getElementById("userDetailContent").innerHTML = content;
      document.getElementById("userDetailModal").classList.remove("hidden");
      document.getElementById("userDetailModal").classList.add("flex");
    } catch (error) {
      console.error("Error loading user details:", error);
    }
  }

  function closeUserDetail() {
    document.getElementById("userDetailModal").classList.add("hidden");
    document.getElementById("userDetailModal").classList.remove("flex");
  }

  // Close modal when clicking outside
  document.getElementById("userDetailModal").addEventListener("click", (e) => {
    if (e.target.id === "userDetailModal") {
      closeUserDetail();
    }
  });

  function renderPagination(currentPage, totalPages) {
    let html = "";

    if (currentPage > 1) {
      html += `<button onclick="loadUsers(${
        currentPage - 1
      })" class="px-4 py-2 text-sm border rounded-l hover:bg-gray-100">Previous</button>`;
    }

    for (let i = 1; i <= totalPages; i++) {
      if (i === currentPage) {
        html += `<button class="px-4 py-2 text-sm border bg-[#3b5d50] text-gray-300">${i}</button>`;
      } else {
        html += `<button onclick="loadUsers(${i})" class="px-4 py-2 text-sm border hover:bg-gray-100">${i}</button>`;
      }
    }

    if (currentPage < totalPages) {
      html += `<button onclick="loadUsers(${
        currentPage + 1
      })" class="px-4 py-2 text-sm border rounded-r hover:bg-gray-100">Next</button>`;
    }

    return html;
  }

  async function loadUsers(page = 1) {
    try {
      const searchTerm = document.getElementById("searchInput").value;
      const sortField = document.getElementById("sortField").value;
      const sortOrder = document.getElementById("sortOrder").value;

      const response = await fetch(
        `/admin/api/users?page=${page}&search=${searchTerm}&sort=${sortField}&order=${sortOrder}`
      );
      const data = await response.json();

      const tbody = document.getElementById("usersTableBody");
      tbody.innerHTML = data.users.map(renderUserRow).join("");

      document.getElementById("pagination").innerHTML = renderPagination(
        data.currentPage,
        data.totalPages
      );

      document.getElementById("startCount").textContent =
        (page - 1) * limit + 1;
      document.getElementById("endCount").textContent = Math.min(
        page * limit,
        data.total
      );
      document.getElementById("totalCount").textContent = data.total;

      currentPage = page;
    } catch (error) {
      console.error("Error loading users:", error);
    }
  }

  // Event Listeners
  document
    .getElementById("searchBtn")
    .addEventListener("click", () => loadUsers(1));
  document.getElementById("searchInput").addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      loadUsers(1);
    }
  });
  document
    .getElementById("sortField")
    .addEventListener("change", () => loadUsers(1));
  document
    .getElementById("sortOrder")
    .addEventListener("change", () => loadUsers(1));

  // Initial load
  loadUsers(1);
</script>
