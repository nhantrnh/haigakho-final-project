<div class="p-6">
  <!-- Header -->
  <div class="mb-8">
    <h2 class="text-2xl font-bold text-gray-800">Orders Management</h2>
    <p class="text-gray-600 mt-1">Track and manage customer orders</p>
  </div>

  <!-- Stats Cards -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
      <div class="flex items-center">
        <div class="p-3 rounded-full bg-[#3b5d50] bg-opacity-10">
          <i class="fas fa-shopping-cart text-[#3b5d50]"></i>
        </div>
        <div class="ml-4">
          <p class="text-sm text-gray-500">Total Orders</p>
          <h3 class="text-2xl font-bold text-gray-800" id="totalOrders">-</h3>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
      <div class="flex items-center">
        <div class="p-3 rounded-full bg-yellow-100">
          <i class="fas fa-clock text-yellow-600"></i>
        </div>
        <div class="ml-4">
          <p class="text-sm text-gray-500">Pending</p>
          <h3 class="text-2xl font-bold text-gray-800" id="pendingOrders">-</h3>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
      <div class="flex items-center">
        <div class="p-3 rounded-full bg-green-100">
          <i class="fas fa-dollar-sign text-green-600"></i>
        </div>
        <div class="ml-4">
          <p class="text-sm text-gray-500">Total Revenue</p>
          <h3 class="text-2xl font-bold text-gray-800" id="totalRevenue">-</h3>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
      <div class="flex items-center">
        <div class="p-3 rounded-full bg-blue-100">
          <i class="fas fa-chart-line text-blue-600"></i>
        </div>
        <div class="ml-4">
          <p class="text-sm text-gray-500">Avg. Order Value</p>
          <h3 class="text-2xl font-bold text-gray-800" id="avgOrderValue">-</h3>
        </div>
      </div>
    </div>
  </div>

  <!-- Filters Section -->
  <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-6">
    <div class="flex flex-col md:flex-row justify-between gap-4">
      <div class="flex flex-1 gap-4">
        <!-- Search -->
        <div class="flex-1">
          <div class="relative">
            <input type="text" id="searchOrder" placeholder="Search orders..." class="w-full pl-10 pr-4 py-2.5 text-gray-900 placeholder-gray-500 bg-gray-50 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#3b5d50] focus:border-transparent" />
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center">
              <i class="fas fa-search text-gray-400"></i>
            </div>
          </div>
        </div>

        <!-- Status Filter -->
        <div class="w-64">
          <select id="statusFilter" class="w-full px-4 py-2.5 text-gray-900 bg-gray-50 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#3b5d50] focus:border-transparent">
            <option value="">All Status</option>
            <option value="pending">Pending</option>
            <option value="confirmed">Confirmed</option>
            <option value="shipping">Shipping</option>
            <option value="delivered">Delivered</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>

        <!-- Sort Order -->
        <div class="w-64">
          <select id="sortOrder" class="w-full px-4 py-2.5 text-gray-900 bg-gray-50 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#3b5d50] focus:border-transparent">
            <option value="desc">Newest First</option>
            <option value="asc">Oldest First</option>
          </select>
        </div>
      </div>

      <!-- Export Button -->
      <button onclick="exportOrders()" class="px-6 py-2.5 bg-[#3b5d50] text-white rounded-xl hover:bg-[#2f4a40] transition-colors inline-flex items-center justify-center">
        <i class="fas fa-download mr-2"></i> Export
      </button>
    </div>
  </div>

  <!-- Orders Table -->
  <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order Info</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200" id="ordersTableBody"></tbody>
      </table>
    </div>

    <!-- Pagination -->
    <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
      <div class="flex justify-between items-center">
        <div class="text-sm text-gray-700">
          Showing <span id="firstEntry">0</span> to <span id="lastEntry">0</span> of <span id="totalEntries">0</span> entries
        </div>
        <div class="flex space-x-2" id="paginationControls"></div>
      </div>
    </div>
  </div>
</div>

<!-- Order Details Modal -->
<div id="orderDetailsModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
  <div class="relative top-20 mx-auto p-5 border w-full max-w-4xl shadow-lg rounded-2xl bg-white">
    <div class="flex justify-between items-center pb-3">
      <h3 class="text-xl font-semibold text-gray-900" id="modalOrderNumber">Order #</h3>
      <button onclick="closeOrderModal()" class="text-gray-400 hover:text-gray-500">
        <i class="fas fa-times"></i>
      </button>
    </div>

    <div class="mt-4">
      <!-- Order Status -->
      <div class="flex items-center justify-between mb-6">
        <div id="modalOrderDate" class="text-sm text-gray-500"></div>
        <div id="modalOrderStatus"></div>
      </div>

      <!-- Customer & Shipping Info -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div class="bg-gray-50 p-4 rounded-xl">
          <h4 class="font-semibold mb-2">Customer Information</h4>
          <div id="modalCustomerInfo" class="text-sm"></div>
        </div>
        <div class="bg-gray-50 p-4 rounded-xl">
          <h4 class="font-semibold mb-2">Shipping Address</h4>
          <div id="modalShippingInfo" class="text-sm"></div>
        </div>
      </div>

      <!-- Order Items -->
      <div class="mb-6">
        <h4 class="font-semibold mb-4">Order Items</h4>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Product</th>
                <th class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">Price</th>
                <th class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">Quantity</th>
                <th class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">Total</th>
              </tr>
            </thead>
            <tbody id="modalOrderItems" class="divide-y divide-gray-200"></tbody>
          </table>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="bg-gray-50 p-4 rounded-xl">
        <div class="space-y-2">
          <div class="flex justify-between text-sm">
            <span class="text-gray-600">Subtotal:</span>
            <span id="modalSubtotal" class="font-medium"></span>
          </div>
          <div class="flex justify-between text-sm">
            <span class="text-gray-600">Shipping:</span>
            <span class="font-medium">Free</span>
          </div>
          <div class="flex justify-between text-base font-semibold border-t border-gray-200 pt-2 mt-2">
            <span>Total:</span>
            <span id="modalTotal"></span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Status update modal -->
<div id="updateStatusModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
  <div class="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-2xl bg-white">
    <div class="flex justify-between items-center pb-3">
      <h3 class="text-xl font-semibold text-gray-900">Update Order Status</h3>
      <button onclick="closeUpdateStatusModal()" class="text-gray-400 hover:text-gray-500">
        <i class="fas fa-times"></i>
      </button>
    </div>

    <form id="updateStatusForm" class="mt-4">
      <input type="hidden" id="updateOrderId">

      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700 mb-2">Current Status</label>
        <div id="currentStatus" class="text-sm"></div>
      </div>

      <div class="mb-6">
        <label class="block text-sm font-medium text-gray-700 mb-2">New Status</label>
        <select id="newStatus" class="w-full px-4 py-2.5 text-gray-900 bg-gray-50 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#3b5d50] focus:border-transparent">
          <option value="pending">Pending</option>
          <option value="confirmed">Confirmed</option>
          <option value="shipping">Shipping</option>
          <option value="delivered">Delivered</option>
          <option value="cancelled">Cancelled</option>
        </select>
      </div>

      <div class="flex justify-end gap-3">
        <button type="button" onclick="closeUpdateStatusModal()" class="px-4 py-2 border border-gray-300 rounded-xl text-gray-700 hover:bg-gray-50">
          Cancel
        </button>
        <button type="submit" class="px-4 py-2 bg-[#3b5d50] text-green-600 rounded-xl hover:bg-[#2f4a40]">
          Update Status
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="fixed top-5 right-5 z-50 space-y-4"></div>

<script>
  let currentPage = 1;
  const limit = 10;

  async function loadOrders(page = 1) {
    const search = document.getElementById('searchOrder').value;
    const status = document.getElementById('statusFilter').value;
    const order = document.getElementById('sortOrder').value;

    try {
      const response = await fetch(`/admin/api/orders?page=${page}&search=${search}&status=${status}&order=${order}`);
      const data = await response.json();

      if (data.success) {
        loadStatsCard(data.orders);
        renderOrders(data.orders);
        updatePagination(data.currentPage, data.totalPages, data.total);
      }
    } catch (error) {
      console.error('Error loading orders:', error);
    }
  }




  function getStatusColor(status) {
    const colors = {
      pending: 'warning',
      confirmed: 'info',
      shipping: 'primary',
      delivered: 'success',
      cancelled: 'danger'
    };
    return colors[status] || 'secondary';
  }

  function updatePagination(currentPage, totalPages, total) {
    // Update showing entries text
    const firstEntry = (currentPage - 1) * limit + 1;
    const lastEntry = Math.min(currentPage * limit, total);

    document.getElementById('firstEntry').textContent = firstEntry;
    document.getElementById('lastEntry').textContent = lastEntry;
    document.getElementById('totalEntries').textContent = total;

    // Update pagination controls
    const controls = document.getElementById('paginationControls');
    controls.innerHTML = renderPagination(currentPage, totalPages);
  }

  // Event Listeners
  document.getElementById('searchOrder').addEventListener('input', debounce(() => loadOrders(1), 300));
  document.getElementById('statusFilter').addEventListener('change', () => loadOrders(1));
  document.getElementById('sortOrder').addEventListener('change', () => loadOrders(1));

  // Initial load
  document.addEventListener('DOMContentLoaded', () => loadOrders(1));

  // Utility functions
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  function renderPagination(currentPage, totalPages) {
    let html = '<div class="flex space-x-2">';

    if (currentPage > 1) {
      html += `<button onclick="loadProducts(${
        currentPage - 1
      })" class="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Previous</button>`;
    }

    for (let i = 1; i <= totalPages; i++) {
      if (i === currentPage) {
        html += `<button class="px-4 py-2 border border-[#3b5d50] text-gray-400 bg-[#3b5d50] rounded-lg text-sm font-medium">${i}</button>`;
      } else {
        html += `<button onclick="loadProducts(${i})" class="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">${i}</button>`;
      }
    }

    if (currentPage < totalPages) {
      html += `<button onclick="loadProducts(${
        currentPage + 1
      })" class="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Next</button>`;
    }

    html += "</div>";
    return html;
  }


  function getStatusBadge(status) {
    return `<span class="status-badge status-${status}">
    ${status.charAt(0).toUpperCase() + status.slice(1)}
  </span>`;
  }


  function loadStatsCard(orders) {

    const totalOrders = orders.length;
    const pendingOrders = orders.filter(order => order.status === "pending").length;
    const totalRevenue = orders.reduce((acc, order) => acc + order.total, 0);
    const avgOrderValue = (totalRevenue / totalOrders).toFixed(2);

    // Hiển thị dữ liệu lên UI
    document.getElementById("totalOrders").innerText = totalOrders;
    document.getElementById("pendingOrders").innerText = pendingOrders;
    document.getElementById("totalRevenue").innerText = `$${totalRevenue}`;
    document.getElementById("avgOrderValue").innerText = `$${avgOrderValue}`;
  }


  // Add this to your existing script section

  function renderOrders(orders) {

    const tbody = document.getElementById('ordersTableBody');
    tbody.innerHTML = orders.map(order => `
    <tr class="hover:bg-gray-50 transition-colors">
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">#${order.orderNumber}</div>
        <div class="text-sm text-gray-500">${order.items.length} items</div>
        <div class="text-sm text-gray-500">${new Intl.DateTimeFormat('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    }).format(new Date(order.createdAt))}</div>
      </td>
      
      <td class="px-6 py-4">
        <div class="text-sm text-black">${order.userId.name}</div>
        <div class="text-sm text-gray-500">${order.shipping.email}</div>
        <div class="text-sm text-gray-500">${order.shipping.phone}</div>
      </td>

      <td class="px-6 py-4 text-right whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900">$${order.total.toFixed(2)}</div>
      </td>

      <td class="px-6 py-4 whitespace-nowrap text-center">
        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${getStatusClasses(order.status)}">
          ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
        </span>
      </td>

      <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
        <button onclick="viewOrder('${order._id}')" class="text-[#3b5d50] hover:text-[#2f4a40] mx-1">
          <i class="fas fa-eye"></i>
        </button>
        <button onclick="updateStatus('${order._id}')" class="text-[#3b5d50] hover:text-[#2f4a40] mx-1">
          <i class="fas fa-edit"></i>
        </button>
      </td>
    </tr>
  `).join('');
  }

  function getStatusClasses(status) {
    const classes = {
      pending: 'bg-yellow-100 text-yellow-800',
      confirmed: 'bg-blue-100 text-blue-800',
      shipping: 'bg-indigo-100 text-indigo-800',
      delivered: 'bg-green-100 text-green-800',
      cancelled: 'bg-red-100 text-red-800'
    };
    return classes[status] || 'bg-gray-100 text-gray-800';
  }


  async function viewOrder(orderId) {
    try {
      const response = await fetch(`/admin/api/orders/${orderId}`);
      const data = await response.json();

      if (data.success) {
        const order = data.order;

        // Update modal content
        document.getElementById('modalOrderNumber').textContent = `Order #${order.orderNumber}`;
        document.getElementById('modalOrderDate').textContent = new Intl.DateTimeFormat('vi-VN', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        }).format(new Date(order.createdAt));

        document.getElementById('modalOrderStatus').innerHTML = `
        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${getStatusClasses(order.status)}">
          ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
        </span>
      `;

        // Customer Info
        document.getElementById('modalCustomerInfo').innerHTML = `
        <p><span class="text-gray-600">Name:</span> ${order.shipping.firstName} ${order.shipping.lastName}</p>
        <p><span class="text-gray-600">Email:</span> ${order.shipping.email}</p>
        <p><span class="text-gray-600">Phone:</span> ${order.shipping.phone}</p>
      `;

        // Shipping Info
        document.getElementById('modalShippingInfo').innerHTML = `
        <p>${order.shipping.address}</p>
        <p>${order.shipping.city}, ${order.shipping.country}</p>
        <p>${order.shipping.postalCode || ''}</p>
      `;

        // Order Items
        document.getElementById('modalOrderItems').innerHTML = order.items.map(item => `
        <tr>
          <td class="px-4 py-3">
            <div class="flex items-center">
              <img src="${item.imageUrl[0]}" alt="${item.name}" class="h-10 w-10 rounded-lg object-cover mr-3">
              <div class="text-sm font-medium text-gray-900">${item.name}</div>
            </div>
          </td>
          <td class="px-4 py-3 text-right text-sm">$${item.price}</td>
          <td class="px-4 py-3 text-right text-sm">${item.quantity}</td>
          <td class="px-4 py-3 text-right text-sm font-medium">$${(item.price * item.quantity).toFixed(2)}</td>
        </tr>
      `).join('');

        // Order Summary
        document.getElementById('modalSubtotal').textContent = `$${order.total.toFixed(2)}`;
        document.getElementById('modalTotal').textContent = `$${order.total.toFixed(2)}`;

        // Show modal
        document.getElementById('orderDetailsModal').classList.remove('hidden');
      }
    } catch (error) {
      console.error('Error fetching order details:', error);
      showToast('error', 'Failed to load order details');
    }
  }

  function closeOrderModal() {
    document.getElementById('orderDetailsModal').classList.add('hidden');
  }

  // Close modal when clicking outside
  document.getElementById('orderDetailsModal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeOrderModal();
    }
  });


  async function updateStatus(orderId) {
    try {
      const response = await fetch(`/admin/api/orders/${orderId}`);
      const data = await response.json();

      if (data.success) {
        const order = data.order;

        // Update modal content
        document.getElementById('updateOrderId').value = orderId;
        document.getElementById('currentStatus').innerHTML = `
        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${getStatusClasses(order.status)}">
          ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
        </span>
      `;

        document.getElementById('newStatus').value = order.status;
        document.getElementById('updateStatusModal').classList.remove('hidden');
      }
    } catch (error) {
      console.error('Error loading order:', error);
      showToast('error', 'Failed to load order details');
    }
  }

  function closeUpdateStatusModal() {
    document.getElementById('updateStatusModal').classList.add('hidden');
  }

  // Handle form submission
  document.getElementById('updateStatusForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const orderId = document.getElementById('updateOrderId').value;
    const status = document.getElementById('newStatus').value;

    try {
      const response = await fetch(`/admin/api/orders/${orderId}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          orderId,
          status
        })
      });

      const data = await response.json();

      if (data.success) {
        showToast('success', 'Order status updated successfully');
        closeUpdateStatusModal();
        loadOrders(currentPage); // Reload orders list
      } else {
        showToast('error', data.message);
      }
    } catch (error) {
      console.error('Error updating status:', error);
      showToast('error', 'Failed to update order status');
    }
  });

  // Close modal when clicking outside
  document.getElementById('updateStatusModal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeUpdateStatusModal();
    }
  });

  function showToast(type, message) {
    // Add your toast notification implementation
    // Example using Toastify or other library
    Toastify({
      text: message,
      duration: 3000,
      gravity: "top",
      position: "right",
      backgroundColor: type === "success" ? "#228a62" : "#ef4444",
    }).showToast();
  }
</script>